//
// Created by Jonathan on 04/12/2017.
//

#include <unistd.h>			/* |read()| */
#include <stdlib.h>			/* |malloc()| */
#include <string.h>			/* |strlen()|, |memset()|, |memcpy()| */
#include <fcntl.h>			/* |open()| */

#include "types.h.gen"
#include "error.h.gen"

#include "fillit.h"

#include "main_read.h.gen"


#define		TETRIMINOS_MAX_PER_FILE		(t_uint)26
#define		TETRIMINOS_NB_CHAR			(t_uint)21
#define		MALLOC_SIZE					(t_uint)(TETRIMINOS_MAX_PER_FILE * TETRIMINOS_NB_CHAR)

#define		READ_COUNT		(t_uint)21

/* -- library_configuration */
static struct
{
	t_bool		initialized;

	t_bool		debug_mode;

	t_pchar		filename;
} internal_context = {
	.initialized	= FALSE,

	.debug_mode	= FALSE
};


/**
 *		internal_context_is_initialize
 *
 *		@param	none
 *
 *		@error	none
 *
 *		@return	TRUE in success, FALSE otherwise
 */
static t_bool		internal_context_is_initialize (void)
{
	return (internal_context.initialized);
}


/* === initialisation function === */
/**
 *		internal_context_initialize
 *
 *		@param	none
 *
 *		@error	none
 */
static void			internal_context_initialize (void)
{
	internal_context.initialized = TRUE;

	internal_context.filename = NULL;
}


static t_bool		internal_stock_file_content_in_tetris_list (t_cpchar			in_file_content,
																t_cuint				in_tetriminos_id,
																t_tetris			**out_tetriminos_lst,
																t_failure_code		*out_failure_code)
{
	t_tetris		*tetriminos_lst;
	t_uint			tetriminos_point[4];
	t_uint 			tetriminos_point_min;
	t_uint 			tetriminos_point_max;
	t_uint			i;
	t_uint			n;


	FT_DEBUG("Tetrimino to treat : \n{%.*s}", 21, in_file_content);

	/* init tetriminos_lst */
	if (! (tetriminos_lst = malloc (sizeof (t_tetris))))
	{
		FT_ERROR("malloc() failed %" PRIu64, sizeof (t_tetris));

		*out_failure_code = FAILURE_CODE_FATAL;
		return FALSE;
	}
	tetriminos_lst->tetriminos = NULL;
	tetriminos_lst->number = in_tetriminos_id;
	tetriminos_lst->height = 0;
	tetriminos_lst->width = 0;
	tetriminos_lst->next = NULL;


	/* get tetrimino size */
	i = 0;
	n = 0;
	while (i < 20)
	{
		if (in_file_content[i] == '#')
			tetriminos_point[n++] = i;
		i = i + 1;
	}
	tetriminos_lst->height = ((tetriminos_point[3] / 5) - (tetriminos_point[0] / 5)) + 1;

	n = 0;
	tetriminos_point_max = 0;
	tetriminos_point_min = 4;
	while (n < 4)
	{
		tetriminos_point[n] = tetriminos_point[n] % 5;
		if (tetriminos_point[n] > tetriminos_point_max)
			tetriminos_point_max = tetriminos_point[n];
		if (tetriminos_point[n] < tetriminos_point_min)
			tetriminos_point_min = tetriminos_point[n];
		n = n + 1;
	}
	tetriminos_lst->width = tetriminos_point_max - tetriminos_point_min + 1;


	/* init char ** */
	if (! (tetriminos_lst->tetriminos = malloc(sizeof (char *) * tetriminos_lst->height)))
	{
		FT_ERROR("malloc() failed %" PRIu64, sizeof (char *) * tetriminos_lst->height);

		*out_failure_code = FAILURE_CODE_FATAL;
		return FALSE;
	}

	i = 0;
	while (i != tetriminos_lst->height)
	{
		if (! (tetriminos_lst->tetriminos[i] = malloc(tetriminos_lst->width)))
		{
			FT_ERROR("malloc() failed %d", tetriminos_lst->width);

			*out_failure_code = FAILURE_CODE_FATAL;
			return FALSE;
		}
		memset (tetriminos_lst->tetriminos[i], '.', tetriminos_lst->width);

		i = i + 1;
	}

	FT_DEBUG("tetriminos struct {height %" PRIu32 ", width %" PRIu32 "}", tetriminos_lst->height, tetriminos_lst->width);

	/* set char ** */
	i = 0;
	n = 0;
	while (n < 4)
	{
		tetriminos_point[n] = tetriminos_point[n] - tetriminos_point_min;
		if (n != 0 && tetriminos_point[n] <= tetriminos_point[n - 1])
			i = i + 1;

		FT_DEBUG("Tetrimino point number %" PRIu32 " value %" PRIu32 " line %" PRIu32, n, tetriminos_point[n], i);

		tetriminos_lst->tetriminos[i][tetriminos_point[n]] = '#';

		n = n + 1;
	}


	FT_DEBUG("tetriminos struct {number %" PRIu32 ", height %" PRIu32 ", width %" PRIu32 "}", tetriminos_lst->number, tetriminos_lst->height, tetriminos_lst->width);

	/* Create next part of the list */
	if (in_file_content[20] == '\n')
	{
		if (!internal_stock_file_content_in_tetris_list(in_file_content + 21, in_tetriminos_id + 1, &tetriminos_lst->next, out_failure_code))
		{
			FT_WARNING ("internal_stock_file_content_in_tetris_list() failed id %d content {%.*s}", in_tetriminos_id + 1, 21, in_file_content);

			/* out_failure_code is set in the internal function */
			return FALSE;
		}
	}

	*out_tetriminos_lst = tetriminos_lst;

	return TRUE;
}


/**
 *
 *
 * @param out_tetriminos_lst
 * @param out_failure_code
 *
 *
 *
 * @return
 */
static t_bool		internal_ft_read (t_tetris				**out_tetriminos_lst,
									  t_failure_code		*out_failure_code)
{
	int				file_descriptor;
	t_pchar			file_content;
	ssize_t			file_content_size;
	char			read_buf[ READ_COUNT + 1 ];
	ssize_t			read_ret;
	t_tetris		*tetriminos_lst;


	/* Read part*/
	if ((file_descriptor = open (internal_context.filename, O_RDONLY)) == -1)
	{
		FT_ERROR ("open() failed filename %s", internal_context.filename);

		*out_failure_code = FAILURE_CODE_FATAL;
		return FALSE;
	}

	if (! (file_content = malloc (MALLOC_SIZE)))
	{
		FT_ERROR ("malloc() failed size %" PRIu32, MALLOC_SIZE);

		*out_failure_code = FAILURE_CODE_FATAL;
		return FALSE;
	}
	memset (file_content, '\0', READ_COUNT + 1);
	file_content_size = 0;

	while ((read_ret = read (file_descriptor, read_buf, READ_COUNT)) > 0)
	{
		read_buf[read_ret] = '\0';
		memcpy (file_content + file_content_size, read_buf, (size_t)read_ret);
		file_content_size = file_content_size + read_ret;
	}

	if (read_ret == -1)
	{
		FT_ERROR ("read() failed %s", "");

		*out_failure_code = FAILURE_CODE_FATAL;
		return FALSE;
	}

	FT_DEBUG("file_content %s", file_content);

	/* //TEMP CHECK CONTENT AND SEE IF IT'S VALID HERE */


	/* Stock part */
	tetriminos_lst = NULL;
	if (! internal_stock_file_content_in_tetris_list (file_content, 1, &tetriminos_lst, out_failure_code))
	{
		FT_WARNING ("internal_stock_file_content_in_tetris_list() failed id %d content {%.*s}", 1, 21, file_content);

		*out_failure_code = READ_MAIN__FT_READ__STOCK_FAILED;
		return FALSE;
	}


	*out_tetriminos_lst = tetriminos_lst;

	*out_failure_code = FAILURE_CODE_NONE;

	return TRUE;
}

/**
 * This function read a file and stock the content in a list
 *
 * @param out_tetriminos_lst
 * @param out_failure_code
 *
 * @error out_tetriminos_lst is NULL
 * @error out_failure_code is NULL
 * @error internal_ft_read() failed
 *
 * @return TRUE in success, FALSE otherwise
 */
extern t_bool		ft_read (t_tetris			**out_tetriminos_lst,
							 t_failure_code		*out_failure_code)
{
	/* basic check */
	if (out_failure_code == NULL)
	{
		FT_ERROR ("out_failure_code %p", (void *)out_failure_code);

		return FALSE;
	}
	*out_failure_code = FAILURE_CODE_UNDEFINED;

	if (out_tetriminos_lst == NULL)
	{
		FT_ERROR ("out_tetriminos_lst %p", (void *)out_tetriminos_lst);

		*out_failure_code = FAILURE_CODE_NULL_PARAMETER;
		return FALSE;
	}
	*out_tetriminos_lst = NULL;

	if (! internal_context_is_initialize ())
	{
		FT_ERROR ("internal_context_is_initialized() %s", "failed");

		*out_failure_code = READ_MAIN__FT_READ__NOT_INITIALIZE;
		return FALSE;
	}


	if (! internal_ft_read (out_tetriminos_lst, out_failure_code))
	{
		FT_WARNING("internal_ft_read() %s", "failed");

		/* out_failure_code is set in the internal function */
		return FALSE;
	}


	*out_failure_code = FAILURE_CODE_NONE;

	return TRUE;
}


/**
* Finalize this file
*
* @param out_failure_code
*
* @error out_failure_code is null
* @error internal_context_is_initialize() failed
*
* @return TRUE in success, FALSE otherwise
*/
extern t_bool		ft_read_finalize (t_failure_code		*out_failure_code)
{
	/* basic check */
	if (out_failure_code == NULL)
	{
		FT_ERROR ("out_failure_code %p", (void *)out_failure_code);

		return FALSE;
	}
	*out_failure_code = FAILURE_CODE_UNDEFINED;

	if (! internal_context_is_initialize ())
	{
		FT_ERROR ("internal_context_is_initialized() %s", "failed");

		*out_failure_code = READ_MAIN__FT_READ_FINALIZE__NOT_INITIALIZE;
		return FALSE;
	}


	free (internal_context.filename);

	internal_context_initialize ();

	internal_context.initialized = FALSE;

	return TRUE;
}

/**
* Initialize this file
*
* @param in_filename
* @param out_failure_code
*
* @error out_failure_code is NULL
* @error in_filename is null
* @error internal_context_is_initialize() failed
* @error malloc() failed
*
* @return TRUE in success, FALSE otherwise
*/
extern t_bool		ft_read_initialize (t_cpchar			in_filename,
										t_failure_code		*out_failure_code)
{
	/* basic check */
	if (out_failure_code == NULL)
	{
		FT_ERROR ("out_failure_code %p", (void *)out_failure_code);

		return FALSE;
	}
	*out_failure_code = FAILURE_CODE_UNDEFINED;

	if (in_filename == NULL)
	{
		FT_ERROR ("in_filename %p", (void *)in_filename);

		*out_failure_code = FAILURE_CODE_NULL_PARAMETER;
		return FALSE;
	}

	if (internal_context_is_initialize ())
	{
		FT_ERROR ("internal_context_is_initialized() %s", "failed");

		*out_failure_code = READ_MAIN__FT_READ_INITIALIZE__ALREADY_INITIALIZE;
		return FALSE;
	}


	internal_context_initialize ();

	if (! (internal_context.filename = malloc (strlen (in_filename))))
	{
		FT_ERROR ("malloc() failed size %" PRIu64, strlen (in_filename));

		*out_failure_code = FAILURE_CODE_FATAL;
		return FALSE;
	}
	internal_context.filename = memcpy(internal_context.filename, in_filename, strlen(in_filename));

	/* //TEMP Debug mode on */
	internal_context.debug_mode = TRUE;


	*out_failure_code = FAILURE_CODE_NONE;

	return TRUE;
}